# anecdot.rb
require 'net/http'
require 'json'

module Anecdote
  DEBUG = true

  CATEGORIES = {
    '1' => { name: '–°–ª—É—á–∞–π–Ω—ã–π', strategies: [:jokeapi_any, :rzhunemogu_random] },
    '2' => { name: '–ü—Ä–æ IT', strategies: [:jokeapi_programming, :devjokes] },
    '3' => { name: '–ß—ë—Ä–Ω—ã–π —é–º–æ—Ä', strategies: [:jokeapi_dark_en, :darkjokes_ru] },
    '4' => { name: '–ü—Ä–æ —Å–µ–º—å—é', strategies: [:rzhunemogu_family] },
    '5' => { name: '–ü—Ä–æ —Ä–∞–±–æ—Ç—É', strategies: [:rzhunemogu_work] },
    '6' => { name: '–†–∞–∑–Ω–æ–µ', strategies: [:jokeapi_any, :rzhunemogu_misc] }
  }.freeze

  # –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MyMemory API
  def self.translate_to_russian(text)
    return text if text.nil? || text.empty?

    encoded_text = URI.encode_www_form_component(text)
    url = "https://api.mymemory.translated.net/get?q=#{encoded_text}&langpair=en|ru"
    debug("Translation URL: #{url}")

    begin
      response = Net::HTTP.get(URI(url))
      data = JSON.parse(response)
      translated_text = data['responseData']['translatedText']

      # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç API
      translated_text.gsub(/\[|\]/, '').strip
    rescue => e
      debug("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: #{e.message}")
      text # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    end
  end

  def self.show_categories
    puts "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤:"
    CATEGORIES.each { |num, data| puts "#{num}. #{data[:name]}" }
    print "–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1-6): "
  end

  def self.get_random_joke
    show_categories
    category_num = gets.chomp

    unless CATEGORIES.key?(category_num)
      puts "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
      return nil
    end

    category = CATEGORIES[category_num]
    puts "\n=== –ü–û–ò–°–ö –ê–ù–ï–ö–î–û–¢–ê ==="
    puts "üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: #{category[:name]}"
    puts "üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏: #{category[:strategies].join(', ')}"

    category[:strategies].each do |strategy|
      puts "\n‚ö° –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: #{strategy}"
      joke = send(strategy)

      # –ï—Å–ª–∏ –∞–Ω–µ–∫–¥–æ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é - –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
      if joke && strategy == :jokeapi_dark_en
        puts "üî† –ü–µ—Ä–µ–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞..."
        joke = translate_to_russian(joke)
      end

      return joke if joke
    end

    puts "\n‚ùå –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"
    nil
  end

  private

  # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
  def self.jokeapi_any
    fetch_jokeapi('Any', 'ru')
  end

  def self.jokeapi_programming
    fetch_jokeapi('Programming', 'ru')
  end

  def self.jokeapi_dark_en
    fetch_jokeapi('Dark', 'en')
  end

  def self.rzhunemogu_random
    fetch_rzhunemogu(1)
  end

  def self.rzhunemogu_family
    fetch_rzhunemogu(1)
  end

  def self.rzhunemogu_work
    fetch_rzhunemogu(2)
  end

  def self.rzhunemogu_misc
    fetch_rzhunemogu(11)
  end

  def self.devjokes
    fetch_devjokes
  end

  def self.darkjokes_ru
    fetch_darkjokes_ru
  end

  # –†–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  def self.fetch_jokeapi(category, lang)
    url = "https://v2.jokeapi.dev/joke/#{category}?lang=#{lang}"
    debug("JokeAPI URL: #{url}")

    begin
      response = Net::HTTP.get(URI(url))
      data = JSON.parse(response)

      if data['error']
        debug("–û—à–∏–±–∫–∞ API: #{data['message']}")
        nil
      elsif joke = data['joke'] || "#{data['setup']}\n#{data['delivery']}"
        debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç")
        joke
      else
        debug("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞")
        nil
      end
    rescue => e
      debug("–û—à–∏–±–∫–∞: #{e.class} - #{e.message}")
      nil
    end
  end

  def self.fetch_rzhunemogu(ctype)
    url = "http://rzhunemogu.ru/RandJSON.aspx?CType=#{ctype}"
    debug("Rzhunemogu URL: #{url}")

    begin
      response = Net::HTTP.get(URI(url))
      if match = response.match(/{"content":"(.+?)"}/)
        debug("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∞–Ω–µ–∫–¥–æ—Ç")
        match[1].gsub('\\r\\n', "\n")
      else
        debug("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç")
        nil
      end
    rescue => e
      debug("–û—à–∏–±–∫–∞: #{e.class} - #{e.message}")
      nil
    end
  end

  def self.fetch_devjokes
    url = "https://backend-omega-seven.vercel.app/api/getjoke"
    debug("DevJokes URL: #{url}")

    begin
      response = Net::HTTP.get(URI(url))
      joke = JSON.parse(response).first
      "#{joke['question']}\n#{joke['punchline']}"
    rescue => e
      debug("–û—à–∏–±–∫–∞: #{e.class} - #{e.message}")
      nil
    end
  end

  def self.fetch_darkjokes_ru
    jokes = [
      "–ü–æ—á–µ–º—É –ø—Ä–∏–∑—Ä–∞–∫ –Ω–µ –æ–±–∏–∂–∞–µ—Ç—Å—è? –ü–æ—Ç–æ–º—É —á—Ç–æ –µ–º—É –≤—Å—ë —Ä–∞–≤–Ω–æ!",
      "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –≤—Ä–∞—á –ø–∞—Ü–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏? '–¢–µ–ø–µ—Ä—å –≤—ã –Ω–∞—à –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç!'"
    ]
    jokes.sample
  end

  def self.debug(msg)
    puts "  üîé #{msg}" if DEBUG
  end
end